model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean
  location    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  status          EventStatus           @default(UNDECIDED)
  visibility      Visibility            @default(CALENDAR_DEFAULT) // Who the event is visible to
  category        EventType
  guests          EventGuest[]
  reminders       Reminder[]
  attachments     Attachment[]
  userPreferences UserEventPreference[]

  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id])

  ownerId String
  owner   User   @relation("EventOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Optional for recurring events
  recurrenceRuleId String?         @unique
  recurrenceRule   RecurrenceRule? @relation(fields: [recurrenceRuleId], references: [id])

  // For instances of recurring event modifications or cancellations
  originalEventId String
  originalEvent   Event?  @relation("RecurringEventInstances", fields: [originalEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instances       Event[] @relation("RecurringEventInstances")

  // Optional for categorization by color
  colorTagId String?
  colorTag   ColorTag? @relation(fields: [colorTagId], references: [id])

  @@map("events")
}

// Model for saving preferred colors
model ColorTag {
  id       String @id @default(uuid())
  name     String
  hexColor String @default("#eda100")

  // Relations
  event                Event[]
  userEventPreferences UserEventPreference[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("color_tags")
}

model EventGuest {
  id          String  @id @default(uuid())
  email       String // For external guests
  isOrganizer Boolean @default(false)
  isOptional  Boolean @default(false)

  // Relations
  responseStatus AttendeeStatus @default(PENDING)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
  @@map("attendees")
}

// Event recurrence settings
model RecurrenceRule {
  id          String   @id @default(uuid())
  interval    Int      @default(1) // Every "interval" days/weeks/months/years (Default: 1 day, 1 week, etc.)
  count       Int?
  until       DateTime // Date until recurrence happens
  byDay       String? // Comma-separated list ("MO, TU, WE")
  byMonth     String? // Comma-separated list ("1, 5, 12")
  byMonthDate String? // Comma-separated list ("1, 15, 30")
  timezone    String   @default("EEST")

  // Relations
  event     Event?
  weekStart WeekStart      @default(MONDAY)
  frequency RecurrenceFreq

  @@map("recurrence_rules")
}

// Event reminder timer
model Reminder {
  id            String @id @default(uuid())
  minutesBefore Int // Reminder time in minutes before start time

  // Relations
  method ReminderMethod @default(EMAIL)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Attachment {
  id       String @id @default(uuid())
  filename String
  fileUrl  String
  mimeType String // File type, e.g image/png
  fileSize Int

  createdAt DateTime @default(now())

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Save user preferences for a specific event
model UserEventPreference {
  id          String  @id @default(uuid())
  customColor String? // User color preference for this event

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  colorTagId String?
  colorTag   ColorTag? @relation(fields: [colorTagId], references: [id])

  @@unique([userId, eventId])
  @@map("user_event_preferences")
}

enum EventType {
  EVENT
  MEETING
  CONFERENCE
  VACATION
  UNAVAILABLE
}

enum EventStatus {
  CONFIRMED
  CANCELLED
  UNDECIDED
}

enum Visibility {
  PUBLIC
  PRIVATE
  CALENDAR_DEFAULT
}

enum AttendeeStatus {
  ACCEPTED
  DECLINED
  PENDING
}

enum RecurrenceFreq {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderMethod {
  POPUP
  EMAIL
}

enum WeekStart {
  MONDAY
  SUNDAY
}
