model Event {
  id          String          @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean
  location    String?
  status      EventStatus     @default(UNDECIDED)
  visibility  EventVisibility @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category EventType

  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id])

  ownerId String
  owner   User   @relation("EventOwner", fields: [ownerId], references: [id])

  // Optional for recurring events
  recurrenceRuleId String?         @unique
  recurrenceRule   RecurrenceRule? @relation(fields: [recurrenceRuleId], references: [id])

  // For instances of recurring event modifications or cancellations
  originalEventId String
  originalEvent   Event?  @relation("RecurringEventInstances", fields: [originalEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instances       Event[] @relation("RecurringEventInstances")

  // Optional for categorization by color
  colorTagId String?
  colorTag   ColorTag? @relation(fields: [colorTagId], references: [id])

  attendees   Attendee[]
  reminders   Reminder[]
  attachments Attachment[]

  @@map("events")
}

model ColorTag {
  id    String @id @default(uuid())
  name  String
  color String

  // Relations
  Event Event[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("color_tags")
}

model Attendee {
  id             String         @id @default(uuid())
  eventId        String
  userId         String
  responseStatus AttendeeStatus @default(NEEDSACTION)
  isOrganizer    Boolean        @default(false)
  isOptional     Boolean        @default(false)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("attendees")
}

model RecurrenceRule {
  id         String         @id @default(uuid())
  frequency  RecurrenceFreq
  interval   Int            @default(1) // Every "interval" days/weeks/months/years (Default: 1 day, 1 week, etc.)
  count      Int?
  until      DateTime // Date until recurrence happens
  byDat      String? // Comma-separated list ("MO, TU, WE")
  byMonth    String? // Comma-separated list ("1, 5, 12")
  byMonthDat String? // Comma-separated list (1, 15, 30)
  weekStart  String         @default("MO")
  timezone   String         @default("EEST")

  event Event?

  @@map("recurrence_rules")
}

model Reminder {
  id            String         @id @default(uuid())
  eventId       String
  method        ReminderMethod @default(EMAIL)
  minutesBefore Int // Reminder time in minutes before start time

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Attachment {
  id       String @id @default(uuid())
  filename String
  fileUrl  String
  mimeType String // File type, e.g image/png
  fileSize Int

  createdAt DateTime @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum EventType {
  EVENT
  MEETING
  CONFERENCE
  VACATION
  UNAVAILABLE
}

enum EventStatus {
  CONFIRMED
  CANCELED
  UNDECIDED
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

enum AttendeeStatus {
  ACCEPTED
  DECLINED
  UNDECIDED
  NEEDSACTION
}

enum RecurrenceFreq {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderMethod {
  POPUP
  EMAIL
}
