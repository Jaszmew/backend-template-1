model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  timeZone  String @default("EEST")

  updatedAt DateTime @updatedAt

  // Relations
  account       Account?
  ownedColorTag ColorTag[]
  calendars     Calendar[]
  attendees     Attendee[]
  eventsOwned   Event[]    @relation("EventOwner")

  @@map("users")
}

model Account {
  id       String @id @default(uuid())
  email    String @unique
  password String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Email confirmation
  isEmailConfirmed Boolean  @default(false)
  lastLogin        DateTime @default(now())

  // Relations
  userId                   String?                    @unique
  user                     User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  privilege                Privilege                  @default(USER)
  AccountConfirmationToken AccountConfirmationToken[]

  @@map("accounts")
}

model AccountConfirmationToken {
  token String @id

  createdAt DateTime  @default(now())
  expiredAt DateTime?

  // Relations
  type AccountConfirmationType

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  @@map("user_confirmation_tokens")
}

enum AccountConfirmationType {
  FORGOT_PASSWORD
  EMAIL_CONFIRMATION
}

enum Privilege {
  ADMIN
  USER
  SUPERADMIN
}
